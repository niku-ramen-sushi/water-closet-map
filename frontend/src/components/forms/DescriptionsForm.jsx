import {
  Box,
  FormControl,
  Heading,
  NativeOption,
  NativeSelect,
  Radio,
  RadioGroup,
  Textarea,
  VStack,
} from "@yamada-ui/react";
import {
  hygieneListAtom,
  isPinEditAtom,
  // pinsAtom,
  // selectedPinIdAtom,
  selectedPinAtom,
} from "../../globalState.js";
import { useAtomValue} from "jotai";
// import {useSetAtom} from "jotai/index.js";

const DescriptionsForm = () => {
  const isPinEdit = useAtomValue(isPinEditAtom);
  // const pins = useAtomValue(pinsAtom);
  // const selectedPinId = useAtomValue(selectedPinIdAtom);
  const selectedPin = useAtomValue(selectedPinAtom);
  const hygieneList = useAtomValue(hygieneListAtom)


  // const pin = pins[selectedPinId];



  return isPinEdit ? (
      selectedPin.map((pin)=> {
        return (
            <Box key={`card_${pin.id}`}
                 border="1px solid #ccc"
                 borderRadius="8px"
                 padding="4"
                 width="100%"
                 maxWidth="500px"
            >
              <VStack spacing={2} width="80%">
                <Heading as="h5" size="md" isTruncated>
                  {pin.title} {pin.id ?"":"‚≠êÔ∏èÊñ∞Ë¶è‚≠êÔ∏è"}
                </Heading>

                <FormControl
                    isRequired
                    label="Á®ÆÈ°û"
                    errorMessage="Á®ÆÈ°û„ÅÆÈÅ∏Êäû„ÅØÂøÖÈ†à„Åß„Åô"
                >
                  <RadioGroup direction="row" defaultValue={pin.type} >
                    <Radio size="sm" value="Áî∑ÊÄß">
                      Áî∑Â≠ê„Éà„Ç§„É¨üöπ
                    </Radio>
                    <Radio size="sm" value="Â•≥ÊÄß">
                      Â•≥Â≠ê„Éà„Ç§„É¨üö∫
                    </Radio>
                    <Radio size="sm" value="ÂÖ±Áî®">
                      ÂÖ±Áî®„Éà„Ç§„É¨üöª
                    </Radio>
                  </RadioGroup>
                </FormControl>

                <FormControl
                    isRequired
                    label="Ë°õÁîü„É¨„Éô„É´"
                    errorMessage="Ë°õÁîü„É¨„Éô„É´„ÅÆÈÅ∏Êäû„ÅØÂøÖÈ†à„Åß„Åô"
                >

                  <NativeSelect
                      placeholder="„É¨„Éô„É´„ÇíÈÅ∏Êäû"
                      defaultValue={pin.name}
                  >
                    {hygieneList.map((hygiene)=>
                        <NativeOption key={`hy_${hygiene.name}`} value={hygiene.name}>{hygiene.name}</NativeOption>

                    )}
                    {/*<NativeOption value="5">„Åã„Å™„ÇäÁ∂∫È∫ó</NativeOption>*/}
                    {/*<NativeOption value="4">Á∂∫È∫ó</NativeOption>*/}
                    {/*<NativeOption value="3">ÊôÆÈÄö</NativeOption>*/}
                    {/*<NativeOption value="2">Ê±ö„ÅÑ</NativeOption>*/}
                    {/*<NativeOption value="1">„Åã„Å™„ÇäÊ±ö„ÅÑ</NativeOption>*/}

                  </NativeSelect>
                </FormControl>

                <FormControl label="Ë©≥Á¥∞">
                  <Textarea
                      placeholder="‰æãÔºöÁ∂∫È∫ó„Å™Áä∂ÊÖã„Åß„Åô„Åå„ÄÅ„ÇÑ„ÇÑÁã≠„ÅÑ„Åß„Åô„ÄÇ"
                      defaultValue={pin.comment}
                  ></Textarea>
                </FormControl>
              </VStack>
            </Box>
        )}
      )
  ) : (
      <></>
  );
};

export default DescriptionsForm;
